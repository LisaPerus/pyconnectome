#!/usr/bin/env python
##########################################################################
# NSAp - Copyright (C) CEA, 2018
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

# System import
import os
import argparse
import textwrap
import glob
import re
import json
from datetime import datetime
from argparse import RawTextHelpFormatter
from datetime import datetime
from pprint import pprint

# DTI-TK imports
from pyconnectome.tractography.dtitk_tbss import dtitk_preprocessing

# Pyconnectome imports
from pyconnectome.wrapper import FSLWrapper

# Bredala import
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("ppyconnectome.tractography.dtitk_tbss",
                     names=["dtitk_preprocessing"])
except:
    pass

# Script documentation
DOC = """
DTI-TK preprocessing
--------------------

Preprocess tensor files and turn them into viable inputs for DTI-TK.

Command example on the MAPT data :
python $PROJECT/MAPT/pyconnectome_dtitk_preprocessing \
    -b /volatile/test_dmri_preproc/MAPT_subjects/02990191LSI/4-Tensor/dtifit/dtifit \
       /volatile/test_dmri_preproc/MAPT_subjects/02990236RMO/4-Tensor/dtifit/dtifit \
       /volatile/test_dmri_preproc/MAPT_subjects/02990247CCO/4-Tensor/dtifit/dtifit \
    -s 02990191LSI 02990236RMO 02990247CCO \
    -o /volatile/test_enigma_dtitk_tbss_v2 \
    -V 2
"""


def is_file(filepath):
    """ Check file's existence - argparse 'type' argument.
    """
    if not os.path.isfile(filepath):
        raise argparse.ArgumentError("File does not exist: %s" % filepath)
    return filepath


def is_directory(dirarg):
    """ Type for argparse - checks that directory exists.
    """
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError(
            "The directory '{0}' does not exist!".format(dirarg))
    return dirarg


# Parse input arguments
def get_cmd_line_args():
    """
    Create a command line argument parser and return a dict mapping
    <argument name> -> <argument value>.
    """
    parser = argparse.ArgumentParser(
        prog="python pyconnectome_dtitk_preprocessing",
        description=textwrap.dedent(DOC),
        formatter_class=RawTextHelpFormatter)

    # Required arguments
    required = parser.add_argument_group("required arguments")
    required.add_argument(
        "-b", "--basename", required=True,
        help="Basename pattern FSL-generated DTI eigensystem files"
             " (e.g: dtifit) for each subject.")
    required.add_argument(
        "-s", "--subject", type=str, required=True,
        help="Subject id.")
    required.add_argument(
        "-o", "--outdir",
        type=is_directory, required=True, metavar="<path>",
        help="Path to the output directory.")

    # Optional argument
    parser.add_argument(
        "-V", "--verbose",
        type=int, choices=[0, 1, 2], default=2,
        help="Increase the verbosity level: 0 silent, [1, 2] verbose.")

    # Create a dict of arguments to pass to the 'main' function
    args = parser.parse_args()
    kwargs = vars(args)
    verbose = kwargs.pop("verbose")
    return kwargs, verbose

"""
Parse the command line.
"""
inputs, verbose = get_cmd_line_args()
tool = "pyconnectome_dtitk_preprocessing"
timestamp = datetime.now().isoformat()
params = locals()
runtime = dict([(name, params[name])
               for name in ("tool", "timestamp")])
outputs = {}
if verbose > 0:
    pprint("[info] Starting DTI-TK preprocessing...")
    pprint("[info] Runtime:")
    pprint(runtime)
    pprint("[info] Inputs:")
    pprint(inputs)


"""
DTITK preprocessing
"""

print("\nPreprocessing subject {0}... \n".format(inputs["subject"]))
sub_dir = os.path.join(inputs["outdir"], inputs["subject"])
if not os.path.isdir(sub_dir):
    os.mkdir(sub_dir)
tensor_dtitk = dtitk_preprocessing(
    basename=inputs["basename"],
    output_dir=sub_dir,
    isotropic=False)
outputs["preprocessed_tensor"] = tensor_dtitk


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""

logdir = os.path.join(inputs["outdir"], "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(
        logdir, "{0}_pyconnectome_dtitk_preprocessing_{1}.json".format(
            inputs["subject"], name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 0:
    pprint("[info] Outputs:")
    pprint(outputs)
