# -*- coding: utf-8 -*-
##########################################################################
# NSAp - Copyright (C) CEA, 2016
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
#
# Created on Thu Oct  6 15:51:37 2016
#
# @author: tg244389
##########################################################################

# System import
import os
import argparse
from pprint import pprint
from datetime import datetime
import json

# Bredala module
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("pyfsl.connectomes.reduced",
                     names=["get_path_of_freesurfer_lut",
                            "mrtrix_connectome_pipeline"])
except:
    pass

# Module import
from pyfsl import __version__ as version
from pyfsl import DEFAULT_FSL_PATH
from pyfsl.wrapper import FSLWrapper
from pyfsl.connectomes.reduced import get_path_of_freesurfer_lut
from pyfsl.connectomes.reduced import mrtrix_connectome_pipeline


# Parameters to keep trace
__hopla__ = ["runtime", "inputs", "outputs"]


DOC = """
Compute the connectome of a given parcellation, like the FreeSurfer aparc+aseg
segmentation, using MRtrix.

Requirements:
    - preprocessed DWI with bval and bvec: if distortions from acquisition
      have been properly corrected it should be alignable to the T1 with a
      rigid transformation.
    - diffusion brain mask: nodif_brain_mask
    - parcellation: image of labeled regions, e.g. Freesurfer aparc+aseg


Command:
python $HOME/git/pyfsl/pyfsl/scripts/pyfsl_mrtrix_connectome.py \
    -a /neurospin/population/HCP/S500-1/139233/T1w/T1w_acpc_dc_restore_brain.nii.gz \
    -i /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/data.nii.gz \
    -b /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/bvals \
    -r /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/bvecs \
    -m /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/nodif_brain_mask.nii.gz \
    -p /neurospin/population/HCP/S500-1/139233/T1w/aparc+aseg.nii.gz \
    -o /volatile/MRtrix/test_hopla \
    -d /volatile/MRtrix/tmp_hopla \
    -t 5 \
    -z 2 \
    -l 250 \
    -s 0.06 \
    -n 5 \
    -v 2
"""


def is_file(filepath):
    """ Check file's existence - argparse 'type' argument.
    """
    if not os.path.isfile(filepath):
        raise argparse.ArgumentError("File does not exist: %s" % filepath)
    return filepath


def get_cmd_line_args():
    """
    Create a command line argument parser and return a dict mapping
    <argument name> -> <argument value>.
    """

    usage = ("%(prog)s -a <t1 brain> -i <dwi> -b <bvals> -r <bvecs> "
             "-m <nodif_brain_mask> -p <parc> -o <outdir> -d <tempdir> "
             "-t <int> -z <int> -l <int> -s <float> -n <int> [options]")
    parser = argparse.ArgumentParser(prog="python mrtrix_connectome.py",
                                     usage=usage, description=DOC)

    # Required arguments

    parser.add_argument("-a", "--t1-brain", type=is_file, required=True,
                        metavar="<path>",
                        help="Path to the brain-only T1 (anatomy).")

    parser.add_argument("-i", "--dwi", type=is_file, required=True,
                        metavar="<path>", help="Path to the diffusion data.")

    parser.add_argument("-b", "--bvals", type=is_file, required=True,
                        metavar="<path>", help="Path to the bvalue list.")

    parser.add_argument("-r", "--bvecs", type=is_file, required=True,
                        metavar="<path>", help="Path to the list of diffusion-"
                                               "sensitized directions.")

    parser.add_argument("-m", "--nodif-brain-mask", type=is_file,
                        required=True, metavar="<path>",
                        help="Diffusion brain binary mask.")

    parser.add_argument("-p", "--parc", type=is_file, required=True,
                        metavar="<path>",
                        help="Parcellation that defines the nodes of the "
                             "connectome, e.g. 'aparc+aseg' from Freesurfer.")

    parser.add_argument("-o", "--outdir", required=True, metavar="<path>",
                        help="Directory where to output.")

    parser.add_argument("-d", "--tempdir", required=True, metavar="<path>",
                        help="Where to write temporary directories e.g. /tmp.")

    parser.add_argument("-t", "--mtracks", required=True, type=int,
                        metavar="<int>",
                        help="Number of millions of tracks to compute.")

    parser.add_argument("-z", "--sift-mtracks", required=True, type=int,
                        metavar="<int>",
                        help="Number of millions of tracks to keep with SIFT.")

    parser.add_argument("-l", "--maxlength", required=True, type=int,
                        metavar="<int>", help="Max fiber length in mm.")

    parser.add_argument("-s", "--cutoff", required=True, type=float,
                        metavar="<float>", help="Cutoff; stopping criteria.")

    parser.add_argument("-n", "--nthreads", required=True, type=int,
                        metavar="<int>", help="Number of threads.")

    # Optional arguments

    parser.add_argument("-f", "--parc-lut", type=is_file, metavar="<path>",
                        help="Path to the Look Up Table for the passed parcel"
                             "lation in the Freesurfer LUT format. By default "
                             "$FREESURFER_HOME/FreeSurferColorLUT.txt.")

    chelp = ("Path to a Look Up Table, in the Freesurfer LUT format, listing "
             "the regions from the parcellation to use as nodes in the "
             "connectome. The integer label should be the row/col position in "
             "the connectome. By default a LUT is created for the Lausanne2008"
             " atlas, which implies that the passed parcellation is "
             "'aparc+aseg' from Freesurfer.")
    parser.add_argument("-c", "--connectome-lut", type=is_file, default=None,
                        metavar="<path>", help=chelp)

    parser.add_argument("-F", "--fsl-init",
                        type=is_file, metavar="<path>",
                        help="Bash script initializing FSL's environment.")

    parser.add_argument("-v", "--verbose", type=int,
                        choices=[0, 1, 2], default=0,
                        help="Increase the verbosity level: 0 silent, [1, 2] "
                             "verbose.")

    # Create a dict of arguments to pass to the 'main' function
    args = parser.parse_args()
    kwargs = vars(args)
    verbose = kwargs.pop("verbose")
    kwargs["fsl_init"] = kwargs["fsl_init"] or DEFAULT_FSL_PATH
    kwargs["parc_lut"] = kwargs["parc_lut"] or get_path_of_freesurfer_lut()

    return kwargs, verbose


"""
Parse the command line.
"""
inputs, verbose = get_cmd_line_args()
tool = "pyfsl_mrtrix_connectome"
timestamp = datetime.now().isoformat()
tool_version = version
fsl_version = FSLWrapper([], shfile=inputs["fsl_init"]).version
params = locals()
runtime = dict([(name, params[name])
               for name in ("tool", "tool_version", "fsl_version",
                            "timestamp")])
if verbose > 0:
    print("[info] Starting MRTrix3 connectome ...")
    print("[info] Runtime:")
    pprint(runtime)
    print("[info] Inputs:")
    pprint(inputs)


"""
Start the connectome creation.
"""
mrtrix_connectome_pipeline(**inputs)
results_dir = inputs["outdir"]


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""
logdir = os.path.join(inputs["outdir"], "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
params = locals()
outputs = dict([(name, params[name])
                for name in ("results_dir", )])
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(logdir, "{0}.json".format(name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 1:
    print("[info] Outputs:")
    pprint(outputs)
