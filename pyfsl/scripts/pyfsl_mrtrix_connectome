#! /usr/bin/env python
# -*- coding: utf-8 -*
##########################################################################
# NSAp - Copyright (C) CEA, 2016
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html for details.
##########################################################################

# System import
import os
import argparse
import json

from pprint import pprint
from datetime import datetime

# Bredala module
try:
    import bredala
    bredala.USE_PROFILER = False
    bredala.register("pyfsl.connectomes.reduced",
                     names=["mrtrix_connectome_pipeline"])
except:
    pass

# Module import
from pyfsl import __version__ as version
from pyfsl import DEFAULT_FSL_PATH
from pyfsl.wrapper import FSLWrapper
from pyfsl.connectomes.reduced import mrtrix_connectome_pipeline


# Parameters to keep trace
__hopla__ = ["runtime", "inputs", "outputs"]


DOC = """
Compute the connectome of a given parcellation, like the FreeSurfer aparc+aseg
segmentation, using MRtrix.

Requirements:
    - preprocessed DWI with bval and bvec: if distortions from acquisition
      have been properly corrected it should be alignable to the T1 with a
      rigid transformation.
    - diffusion brain mask: nodif_brain_mask
    - parcellation: image of labeled regions, e.g. Freesurfer aparc+aseg


Command:
python $HOME/git/pyfsl/pyfsl/scripts/pyfsl_mrtrix_connectome.py \
    -a /neurospin/population/HCP/S500-1/139233/T1w/T1w_acpc_dc_restore_brain.nii.gz \
    -i /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/data.nii.gz \
    -b /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/bvals \
    -r /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/bvecs \
    -m /neurospin/population/HCP/S500-1/139233/T1w/Diffusion/nodif_brain_mask.nii.gz \
    -p /neurospin/population/HCP/S500-1/139233/T1w/aparc+aseg.nii.gz \
    -o /volatile/MRtrix/test_hopla \
    -d /volatile/MRtrix/tmp_hopla \
    -t 5 \
    -z 2 \
    -l 250 \
    -s 0.06 \
    -n 5 \
    -v 2
"""


def is_file(filepath):
    """ Check file's existence - argparse 'type' argument.
    """
    if not os.path.isfile(filepath):
        raise argparse.ArgumentError("File does not exist: %s" % filepath)
    return filepath


def get_cmd_line_args():
    """
    Create a command line argument parser and return a dict mapping
    <argument name> -> <argument value>.
    """
    usage = ("%(prog)s -s <subject id> -i <dwi> -b <bvals> -r <bvecs> "
             "-a <'freesurfer'|t1 brain> -p <t1 parc> -f <t1 parc LUT> "
             "-c <'lausanne2008'|connectome LUT> -o <outdir> -d <tempdir> "
             "-t <int> -z <int> -l <int> -k <float> -n <int> [options]")
    parser = argparse.ArgumentParser(prog="python mrtrix_connectome.py",
                                     usage=usage, description=DOC)

    # Required arguments

    parser.add_argument("-s", "--subject-id", required=True, metavar="<id>",
                        help="Subject identifier.")

    parser.add_argument("-i", "--dwi", type=is_file, required=True,
                        metavar="<path>", help="Path to the diffusion data.")

    parser.add_argument("-b", "--bvals", type=is_file, required=True,
                        metavar="<path>", help="Path to the bvalue list.")

    parser.add_argument("-r", "--bvecs", type=is_file, required=True,
                        metavar="<path>", help="Path to the list of diffusion-"
                                               "sensitized directions.")

    ahelp = ("2 possibilities: (1) if you set this argument to 'freesurfer', "
             "the Freesurfer T1 brain (i.e. <subjects_dir>/<subject_id>/mri/"
             "brain.mgz) will be used and registered to diffusion with "
             "Freesurfer 'bbregister'. It implies that you pass 'subjects_dir'"
             " or set $SUBJECTS_DIR environment variable. "
             "(2) if you don't want to provide/use Freesurfer, set to path of "
             "a T1 brain-only volume registered to diffusion. It is not "
             "required that the T1 has the same spacing as the diffusion as "
             "long as they are registered (you can keep the T1 in its native "
             "resolution).")
    parser.add_argument("-a", "--t1-brain-to-dif", required=True,
                        metavar="<'freesurfer'|path>", help=ahelp)

    parser.add_argument("-p", "--t1-parc", type=is_file, required=True,
                        metavar="<path>",
                        help="Path to the parcellation that defines the nodes "
                             "of the connectome, e.g. aparc+aseg.mgz from Free"
                             "surfer. Should be in the same space as the T1.")

    fhelp = ("Path to the Look Up Table for the passed parcellation in the "
             "Freesurfer LUT format. If your T1 parcellation comes from "
             "Freesurfer, this will most likely be "
             "<$FREESURFER_HOME>/FreeSurferColorLUT.txt.")
    parser.add_argument("-f", "--t1-parc-lut", type=is_file, required=True,
                        metavar="<path>", help=fhelp)

    chelp = ("2 possibilities: (1) set to 'lausanne2008', a predefined LUT "
             "for (and only for) Freesurfer aparc+aseg parcellation (Lausanne "
             "et al. 2008 atlas). (2) set to the path to a Look Up Table in "
             "the Freesurfer LUT format, listing the regions from the parcel"
             "lation to use as nodes in the connectome. The region names "
             "should match the ones used in the 't1_parc_lut' and the integer "
             "labels should be the row/col positions in the connectome.")
    parser.add_argument("-c", "--connectome-lut", required=True,
                        metavar="<path>", help=chelp)

    parser.add_argument("-o", "--outdir", required=True, metavar="<path>",
                        help="Directory where to output.")

    parser.add_argument("-d", "--tempdir", required=True, metavar="<path>",
                        help="Where to write temporary directories e.g. /tmp.")

    parser.add_argument("-t", "--mtracks", required=True, type=int,
                        metavar="<int>",
                        help="Number of millions of tracks to compute.")

    parser.add_argument("-l", "--maxlength", required=True, type=int,
                        metavar="<int>", help="Max fiber length in mm.")

    parser.add_argument("-k", "--cutoff", required=True, type=float,
                        metavar="<float>",
                        help="FOD cutoff = stopping criteria.")

    parser.add_argument("-n", "--nb-threads", required=True, type=int,
                        metavar="<int>", help="Number of threads.")

    # Optional arguments

    parser.add_argument("-I", "--seed-gmwmi", action="store_true",
                        help="Set this option if you want to activate the "
                             "'-seed_gmwmi' option of MRtrix 'tckgen', to "
                             "seed from the GM/WM interface. Otherwise, and "
                             "by default, the seeding is done in white matter "
                             "('-seed_dynamic' option).")

    parser.add_argument("-z", "--sift-mtracks", type=int, metavar="<int>",
                        help="Number of millions of tracks to keep with SIFT. "
                             "If not set, SIFT is not applied.")

    parser.add_argument("-Z", "--sift2", action="store_true",
                        help="To activate SIFT2.")

    parser.add_argument("-S", "--subjects-dir", metavar="<path>",
                        help="To set or bypass the $SUBJECTS_DIR environment "
                             "variable.")

    parser.add_argument("-B", "--nodif-brain", type=is_file, metavar="<path>",
                        help="Diffusion brain-only volume to use to estimate "
                             "the registration between diffusion and T1.")

    parser.add_argument("-m", "--nodif-brain-mask", type=is_file,
                        metavar="<path>",
                        help="Path to diffusion brain binary mask.")

    uhelp = ("If the <t1_parc> is aparc+aseg or aparc.a2009s+aseg from "
             "Freesurfer set this option to True, to recompute the "
             "subcortical segmentations of 5 structures that are uncorrectly "
             "segmented by Freesurfer, using FSL FIRST")
    parser.add_argument("-u", "--labelsgmfix", action="store_true", help=uhelp)

    parser.add_argument("-D", "--delete-raw-tracks", action="store_true",
                        help="To save disk space, delete the raw tracks when "
                             "the connectome has been computed.")

    parser.add_argument("-K", "--keep-dwi-mif", action="store_false",
                        dest="delete_dwi_mif", default=True,
                        help="To not delete <outdir>/DWI.mif, which is a copy "
                             "of the input <dwi> in the .mif format.")

    parser.add_argument("-U", "--no-mif-gz", action="store_false",
                        dest="mif_gz", default=True,
                        help="To not compress MIF files: .mif instead of "
                             ".mif.gz.")

    parser.add_argument("-F", "--fsl-init", type=is_file, metavar="<path>",
                        help="Bash script initializing FSL's environment.")

    parser.add_argument("-v", "--verbose", type=int,
                        choices=[0, 1, 2], default=2,
                        help="Increase the verbosity level: 0 silent, [1, 2] "
                             "verbose.")

    # Create a dict of arguments to pass to the 'main' function
    args = parser.parse_args()
    kwargs = vars(args)
    verbose = kwargs.pop("verbose")
    if kwargs["fsl_init"] is None:
        kwargs["fsl_init"] = DEFAULT_FSL_PATH

    return kwargs, verbose


"""
Parse the command line.
"""
inputs, verbose = get_cmd_line_args()
tool = "pyfsl_mrtrix_connectome"
timestamp = datetime.now().isoformat()
tool_version = version
fsl_version = FSLWrapper([], shfile=inputs["fsl_init"]).version
params = locals()
runtime = dict([(name, params[name])
               for name in ("tool", "tool_version", "fsl_version",
                            "timestamp")])
if verbose > 0:
    pprint("[info] Starting MRTrix3 connectome ...")
    pprint("[info] Runtime:")
    pprint(runtime)
    pprint("[info] Inputs:")
    pprint(inputs)


"""
Start the connectome computation.
"""
mrtrix_connectome_pipeline(**inputs)
results_dir = inputs["outdir"]


"""
Update the outputs and save them and the inputs in a 'logs' directory.
"""
logdir = os.path.join(inputs["outdir"], "logs")
if not os.path.isdir(logdir):
    os.mkdir(logdir)
params = locals()
outputs = dict([(name, params[name]) for name in ("results_dir", )])
for name, final_struct in [("inputs", inputs), ("outputs", outputs),
                           ("runtime", runtime)]:
    log_file = os.path.join(logdir, "{0}.json".format(name))
    with open(log_file, "wt") as open_file:
        json.dump(final_struct, open_file, sort_keys=True, check_circular=True,
                  indent=4)
if verbose > 1:
    pprint("[info] Outputs:")
    pprint(outputs)
